#!/usr/bin/env python3

# A python utility to generate a feed of recently committed files in a git repository

# TODO: Add Commit Author #
# TODO: Add CLI flag to pass a custom git repo #
# TODO: Check Valid .git repo #

import subprocess as sp
import pathlib
import os
import datetime
from dateutil.parser import parse

HEAD = """<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
"""

FOOTER = """</channel>
</rss>
"""

# Assuming your current working dir is the repo
repo_name = f"""{os.path.basename(os.getcwd())}.git"""
last_build_date = datetime.datetime.now().strftime("%a, %d %b %Y")


def get_recent_files(no_of_items):
    cmd = f"""git log --no-color -n {no_of_items} --date=rfc --diff-filter=A --name-status --pretty='%ad'"""

    result = sp.Popen(cmd, shell=True, stdout=sp.PIPE, stderr=sp.PIPE)
    out, err = result.communicate()
    clean_output = out.decode("utf-8").replace("A\t", "").split("\n")
    clean_output = list(filter(lambda x: x != "", clean_output))

    files = []
    for item in clean_output:
        if is_valid(item):
            date = item
        elif pathlib.Path(item).exists():
            entry = item, date
            files.append(entry)
    return files


def is_valid(date):
    try:
        if isinstance(parse(date), datetime.datetime):
            return True
    except ValueError:
        return False


def get_repo_origin():
    repo_origin = "git config --get remote.origin.url"
    result = sp.Popen(repo_origin, shell=True, stdout=sp.PIPE, stderr=sp.PIPE)
    result, err = result.communicate()
    return result.decode("utf-8").strip()


if __name__ == "__main__":
    # use this to configure no of items in feed.xml
    FEED_ITEMS = 10
    files = get_recent_files(FEED_ITEMS)
    with open("feed.xml", "w") as feed:
        feed.write(HEAD)
        feed.write(
            f"""<title>{repo_name}</title>\n<link>{get_repo_origin()}</link>\n"""
        )
        feed.write(
            f"""<description>Recently committed files in {repo_name}</description>\n"""
        )
        feed.write(f"""<lastBuildDate>{last_build_date}</lastBuildDate>""")
        for item in files:
            feed.write("""<item>\n""")
            feed.write(f"""<title>{item[0]}</title>\n""")
            feed.write(f"""<pubDate>{item[1]}</pubDate>\n""")
            feed.write("""</item>\n""")
        feed.write(FOOTER)
