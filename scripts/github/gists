#!/usr/bin/env python3

# Find all gists of a github user

# Usage
# Best use with FZF

# ./gists Bhupesh-V | fzf | awk -F  "," '{print $2}' | xargs -0 browse > /dev/null 2>&1

import urllib.parse
import urllib.request
import json
import sys
import time
from pathlib import Path

HEADERS = {
    "User-Agent": "Mozilla/5.0",
    "Accept": "application/vnd.github.v3+json",
    "Content-Type": "application/json",
}

base_url = "https://api.github.com"


def parse_link_header(link_header):
    header_links = link_header.split(",")[0].split(";")
    if header_links[1] == ' rel="next"':
        next_page = header_links[0]
        next_page = next_page[1: len(next_page) - 1]
    else:
        next_page = None

    return next_page


def request(url):
    req = urllib.request.Request(url, headers=HEADERS)
    with urllib.request.urlopen(req) as response:
        res = json.loads(response.read().decode("utf-8"))
        if response.headers["link"] is not None:
            next_url = parse_link_header(response.headers["link"])
        else:
            next_url = None

    return res, next_url

def handle_pagination(url):
    res_list = []
    while True:
        res, next_url = request(url)
        res_list += res
        if next_url is None:
            break
        url = next_url

    return res_list

def find_all_gists(user):
    try:
        gists = handle_pagination(f"{base_url}/users/{user}/gists?per_page=100")
    except urllib.error.HTTPError as e:
        if e.code == 403:
            print("GitHub API rate limit exceeded. Only 60 requests/hour")
            exit()
        elif e.code == 404:
            print("User doesn't exist. Please re-check username")
            exit()
        else:
            pass
    return gists

def show_gists(gists):
    for gist in gists:
        if gist['description'] == "":
            first_filename = list(gist['files'].keys())
            print(f"{first_filename[0]},", end="")
        else:
            print(f"{gist['description']},", end="")
        print(f"{gist['html_url']}")

def read_token():
    env_path = Path.home() / ".env.json"
    credentials_file = Path.home() / ".git-credentials"
    if env_path.is_file():
        secrets = json.loads(env_path.read_text())
        if "GITHUB_TOKEN" in secrets:
            HEADERS["Authorization"] = f"token {secrets['GITHUB_TOKEN']}"
        else:
            print("GITHUB_TOKEN not found in .env.json")
            exit()
    elif credentials_file.is_file():
        # Reading token from .git-credentials
        token_string = Path(credentials_file).read_text()
        # or use regex
        # token = re.search('[^https://].*:(.*)@', token_string).group(1)
        token = token_string.split(":")[2].split("@")[0]
        if token is None or token == "":
            print("Error reading token from .git-credentials. Please check if the file has valid content")
            exit()
        HEADERS["Authorization"] = f"token {token}"
    else:
        print("No .env.json or .git-credentials file found in home directory")
        exit()


if __name__ == "__main__":
    # yeah i will use argparse later
    if len(sys.argv) < 2:
        print("Please provide Github username")
        exit()

    read_token()
    user = sys.argv[1]
    gists = find_all_gists(user)
    # print(json.dumps(gists, indent = 4))
    show_gists(gists)