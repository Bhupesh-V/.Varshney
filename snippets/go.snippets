snippet json "Prettify/Indent JSON" b
// import "encoding/json"
func Indent(v interface{}) string {
	b, err := json.MarshalIndent(v, "", "  ")
	if err != nil {
		return fmt.Sprintf("%#v", v)
	}
	return string(b)
}
endsnippet

# Check Item in Slice/List
snippet in
func In(item $1, list []$2) bool {
	for _, b := range list {
		if b == item {
			return true
		}
	}
	return false
}
endsnippet

# Insert a CLI Flag
snippet flag "Insert a CLI flag"
flag.StringVar(&${1:var}, "${2:flag}", "${3:defaultValue}", "${4:description}")
endsnippet

snippet go "Go Starter" b
package main

import (
    "fmt"
)

func main() {
    $0
}
endsnippet

snippet post "Go HTTP POST Request" b
// import bytes
// impor net/http
body := bytes.NewReader(payloadBytes)
req, err := http.NewRequest("POST", "${1:URL}", body)
if err != nil {
	fmt.Println(err)
}
// req.Header.Set("Content-Type", "application/json")

resp, err := http.DefaultClient.Do(req)
if err != nil {
	fmt.Println(err)
}
defer resp.Body.Close()
endsnippet


snippet get "Go HTTP GET Request" b
req, err := http.NewRequest("GET", "${1:URL}", nil)
// req.Header.Add("User-Agent", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36")
resp, err := http.DefaultClient.Do(req)
if err != nil {
	// err.Error()
	return
}
endsnippet


snippet rjson "Read JSON from File to Go Map" b
// import os
// import "encoding/json"
func readJSONToken(fileName string, filter func(map[string]interface{}) bool) []map[string]interface{} {
	file, _ := os.Open(fileName)
	defer file.Close()

	decoder := json.NewDecoder(file)

	filteredData := []map[string]interface{}{}

	// Read the array open bracket
	decoder.Token()

	data := map[string]interface{}{}
	for decoder.More() {
		decoder.Decode(&data)

		if filter(data) {
			filteredData = append(filteredData, data)
		}
	}

	return filteredData
}
endsnippet

snippet rfile "Read entire file"
content, err := os.ReadFile("${1:filepath}")
if err != nil {
    fmt.Println("Err")
}
fmt.Println(string(content))
endsnippet

snippet rcfile "Read file in chunks" b
file, err := os.Open("${1:filepath}")
if err != nil {
    fmt.Println("Error opening file!!!")
}
defer file.Close()

// declare chunk size
const maxSz = 4

// create buffer
b := make([]byte, maxSz)

for {
    // read content to buffer
    readTotal, err := file.Read(b)
    if err != nil {
        if err != io.EOF {
            fmt.Println(err)
        }
        break
    }
    // print content from buffer
    fmt.Println(string(b[:readTotal]))
}
endsnippet

snippet rfilel "Read file line by line / word by word" b
file, err := os.Open("${1:filepath}")
if err != nil {
    fmt.Println(err)
}
defer file.Close()

// import bufio
scanner := bufio.NewScanner(file)
// scanner.Split(bufio.ScanWords)    // use scanwords
for scanner.Scan() {
    fmt.Println(scanner.Text())
}

if err := scanner.Err(); err != nil {
    fmt.Println(err)
}
endsnippet

snippet rjson "Read JSON file" b
content, err := os.ReadFile("${1:filepath}")
if err != nil {
    log.Fatal("Error opening file: ", err)
}

// unmarshall the data into `payload`
var payload map[string]interface{}
err = json.Unmarshal(content, &payload)
if err != nil {
    log.Fatal("Error during Unmarshal(): ", err)
}
endsnippet


snippet ctime "Current Time in Readable foramt"
fmt.Printf("Current Time: %v\n", time.Now().Format(time.RFC850))
endsnippet
