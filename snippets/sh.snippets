snippet script "Shell Script Template" b

SCRIPT_NAME="$0"
# SCRIPT_URL=""
TMP_FILE="/tmp/script.sh"
VERSION="1.0"

installed() {
    cmd=$(command -v "${1}")

    [[ -n "${cmd}" ]] && [[ -f "${cmd}" ]]
    return ${?}
}

die() {
    >&2 echo "Fatal: $*"
    exit 1
}

[[ "${BASH_VERSINFO[0]}" -lt 4 ]] && die "Bash >=4 required"

deps=(fzf git awk xargs cut nl tput)
for dep in "${deps[@]}"; do
    installed "${dep}" || die "Missing dependency: '${dep}'"
done

show_version() {
    printf "script version %s\n" "$VERSION"
}

print_help() {
    cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] [-u]

Available options:

-h, --help      Print this help and exit
-v, --version   Print current ugit version
-u, --update    Update ugit
EOF
    printf "\n%s\n" "Contact 📬️: varshneybhupesh@gmail.com for assistance"
}

update() {
    printf "%s\n" "Checking for updates ..."
    curl -s -L "$SCRIPT_URL" > "$TMP_FILE"
    NEW_VER=$(grep "^VERSION" "$TMP_FILE" | awk -F'[="]' '{print $3}')

    if [[ "$VERSION" < "$NEW_VER" ]]; then
        printf "Updating script \e[31;1m%s\e[0m -> \e[32;1m%s\e[0m\n" "$VERSION" "$NEW_VER"
        chmod +x "$TMP_FILE"
        # WIP
        if cp "$TMP_FILE" "$SCRIPT_NAME"; then printf "%s\n" "Done"; fi
        rm -f "$TMP_FILE"
    else
        printf "%s\n" "script is already at the latest version ($VERSION)"
        rm -f "$TMP_FILE"
    fi
    exit 0
}

main() {
    if [[ $# -gt 0 ]]; then
        local key="$1"
        case "$key" in
            --version|-v)
                show_version
                ;;
            --update|-u)
                update
                ;;
            --help|-h)
                print_help
                exit
                ;;
            *)
                printf "%s\n" "ERROR: Unrecognized argument $key"
                exit 1
                ;;
        esac
    else
        # do something
    fi
}

main "$@"
endsnippet
